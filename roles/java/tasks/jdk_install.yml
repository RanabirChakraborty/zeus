---
- assert:
    that:
      - item is defined
      - item.name is defined
      - item.source is defined
      - item.owner is defined
    quiet: true

- set_fact:
    jdk_archive: "{{ jdk_home_folder }}/{{ item.name }}.tgz"

- stat:
    path: "{{ jdk_archive }}"
  register: path_to_jdk_archive 

- name: "Download jdk from {{ item.source }}"
  get_url:
    url: "{{ item.source }}"
    dest: "{{ jdk_archive }"
  register: jdk_download
  when:
    - path_to_jdk_archive.stat is defined
    - not path_to_jdk_archive.stat.exists

- stat:
    path: "{{ item.java_home }}"
  register: path_to_java_home

- name: "Create home dir {{ item.java_home }}"
  file:
    state: directory
    path: "{{ item.java_home }}" 
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"

- name: "Deploy jdk {{ item.java_home }}"
  block:
    - name: "Deleting {{ item.java_home }} if already exists"
      file:
        state: absent
        path: "{{ item.java_home }}"

    - name: "Unpack archive {{ jdk_archive }}"
      unarchive:
        src: "{{ jdk_archive }}"
        dest: /opt/oracle
        remote_src: true
  when:
    - jdk_download is defined
    - path_to_java_home.stat is defined
    - not path_to_java_home.stat.exists

- name: "Ensure appropriate owner/group for jdk: {{ item.java_home }}."
  file: 
    state: directory 
    path: "{{ item.java_home }}" 
    owner: "{{ item.owner }}"
    group: "{{ item.owner }}"
    recurse: yes

