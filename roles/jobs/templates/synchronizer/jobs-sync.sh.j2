#!/bin/bash
set -eo pipefail
readonly JOBS_DEFINITION_HOME='{{ jobs.descriptors.home }}'
readonly JOB_ID=${1}
set -u

usage() {
  echo "$(basename "${0}") [job-id]"
  echo
  echo -n 'If not job-id is provided, this script will check that existing jobs '
  echo "defined in ${JOBS_DEFINITION_HOME} all exists on server."
  echo
}

printSeparationLine() {
  echo '---------------------------'
}

isJobMissing() {
  local job_name=${1}
  local jobs_list=${2}

  set +e
  grep -xqe "${job_name}" "${JOBS_LIST}"
  status=${?}
  set -e
  echo "${status}"
}

updateJob() {
  local job_file_descriptor=${1}
  local job_update_report=$(mktemp)
  
  set -e
  jenkins-jobs update "${job_file_descriptor}" 2> "${job_update_report}"
  status="${?}"
  set +e
  
  if [ "${status}" -ne 0 ]; then
      cat "${job_update_report}"
      exit "${status}"
  fi
  rm -f "${job_update_report}"
}


if [ -z "${JOB_ID}" ]; then
  readonly JOBS_LIST=${JOBS_LIST:-$(mktemp)}
  trap 'rm -rf ${JOBS_LIST}' EXIT
  set -u

  jenkins-jobs list > "${JOBS_LIST}" 2> /dev/null
  for job_file_descriptor in "${JOBS_DEFINITION_HOME}"/*.yml 
  do
    job_name="$(basename ${job_file_descriptor})"
    if [ $(isJobMissing "${job_name%.yml}" "${JOBS_LIST}") -ne 0 ]; then
      echo "${job_name%.yml}"
      updateJob "${job_file_descriptor}"
    fi 
  done
else
  printSeparationLine
  job_file="${JOB_ID}.yml"
  echo -n "Checking config for ${job_file}..."
  jenkins-jobs test "${job_file}" > /dev/null 2>&1 | sed -e '/INFO:/d'
  echo 'Done.'
  echo -n "Updating job ${job_file}..."
  jenkins-jobs update "${job_file}" 2>&1 | sed -e '/^INFO:/d'
  echo 'Done.'
  printSeparationLine
  echo
fi
